{"version":3,"file":"static/js/451.f0d23f63.chunk.js","mappings":"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","sources":["../node_modules/@randlabs/communication-bridge/index.js","../node_modules/@randlabs/communication-bridge/lib/messenger.js","../node_modules/@randlabs/myalgo-connect/index.js","../node_modules/@randlabs/myalgo-connect/lib/main.js","../node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js","../node_modules/@randlabs/myalgo-connect/lib/popup/popup.js","../node_modules/@randlabs/myalgo-connect/lib/utils/errors.js","../node_modules/@randlabs/myalgo-connect/lib/utils/utils.js"],"sourcesContent":["module.exports = require(\"./lib/messenger\");\n","class Messenger {\n\n\t/**\n\t * @callback onMessage\n\t * @param {error} err\n\t * @param {Object} result\n\t */\n\n\t/**\n\t * @description Callback function to send response to the window source of the message\n\t * @callback sendResponse\n\t * @param {Object} response Message response\n\t * @returns {void}\n\t */\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessageCallback\n     * @param {Object} json\n\t * @param {Window} source\n     * @param {sendResponse} cb\n\t * @param {Messenger} bridge\n\t * @returns {void}\n     */\n\n\t/**\n\t * @description Send message options\n\t * @typedef {Object} sendMessageOptions\n\t * @property {boolean} waitForReply Wait for a reply from the recipient\n\t * @property {string} origin Override Window.origin\n\t * @property {number} timeout Timeout to wait for reply message, default 4000 msec\n\t */\n\n\t/**\n     * @param {string} channelName  Channel Name\n     * @param {onMessageCallback} [onMessageCallback] Callback function\n     */\n\n\tconstructor(channelName, onMessageCallback) {\n\t\tthis.channelName = channelName;\n\t\tthis.onMessage = onMessageCallback;\n\n\t\tthis._installListener();\n\n\t\t/**\n\t\t * @access private\n\t\t * @typedef {Object.<string, onMessage>} RequestObject Request objects\n\t\t * @type {RequestObject} _requests Mapping of request ids to callbacks\n\t\t */\n\t\tthis._requests = new Map();\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Next request id\n\t\t */\n\t\tthis._nextId = 0;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Time to wait for the message response\n\t\t */\n\t\tthis._defaultTimeout = 4000;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\t_installListener() {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access private\n\t\t * @param {Window} this\n\t\t * @param {MessageEvent} event\n\t\t */\n\n\t\tthis._listener = function (event) {\n\t\t\t// Ignore invalid messages or those after the client has closed\n\t\t\tif (!event.data || typeof event.data !== 'string') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet json;\n\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(event.data);\n\t\t\t\tif (!json.channel || json.channel !== that.channelName) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (typeof json.message !== 'object') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t // Ignore malformed messages or not targetting us\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add request callback\n\t\t\tif (typeof json.replyId !== 'undefined') {\n\n\t\t\t\tif (typeof json.replyId !== 'number' || (json.replyId % 1) !== 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If we have a message waiting for a reply, process it, else ignore\n\t\t\t\tconst req = that._requests.get(json.replyId);\n\t\t\t\tif (req) {\n\t\t\t\t\t// Ignore if the message comes from somewhere else\n\t\t\t\t\tif (event.origin !== req.targetOrigin) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tclearTimeout(req.timeout);\n\n\t\t\t\t\tthat._requests.delete(json.replyId);\n\n\t\t\t\t\treq.resolve(json.message);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (typeof json.id !== 'number' || (json.id % 1) !== 0 || !that.onMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// We received a message\n\t\t\t\tconst channel = that.channelName;\n\t\t\t\tconst replyId = json.id;\n\t\t\t\tconst origin = event.origin;\n\n\t\t\t\tconst replyMessage = function (message) {\n\t\t\t\t\tconst request = {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\treplyId,\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t};\n\n\t\t\t\t\tevent.source.postMessage(\n\t\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\t\torigin\n\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tthat.onMessage(json.message, event.origin, event.source, replyMessage, that);\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener(\"message\", this._listener);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Send a message to another window\n\t * @param {Window} targetWindow Target Window\n\t * @param {Object} message Object Message\n\t * @param {string} origin Target origin\n\t * @param {sendMessageOptions} [options] Object Message\n\t * @returns {Promise<any>} Returns\n\t */\n\tsendMessage(targetWindow, message, origin, options) {\n\t\tlet targetOrigin;\n\t\ttry {\n\t\t\ttargetOrigin = new URL(origin).origin;\n\t\t}\n\t\tcatch (e) {\n\t\t\tthrow new Error('Invalid origin URL');\n\t\t}\n\n\t\t// Prepare message\n\t\tconst request = {\n\t\t\tchannel: this.channelName,\n\t\t\tid: this.getNextId(),\n\t\t\tmessage: message,\n\t\t};\n\n\t\tif (options && options.waitForReply) {\n\t\t\tconst that = this;\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t// Set a timeout if a response is not received\n\t\t\t\tconst timeout = setTimeout(function() {\n\t\t\t\t\tconst req = that._requests.get(request.id);\n\t\t\t\t\tif (req) {\n\t\t\t\t\t\tthat._requests.delete(request.id);\n\n\t\t\t\t\t\treject(new Error('Timeout expired for the message response'));\n\t\t\t\t\t}\n\t\t\t\t}, options && options.timeout ? options.timeout : that._defaultTimeout);\n\n\t\t\t\tthat._requests.set(request.id, {\n\t\t\t\t\ttimeout,\n\t\t\t\t\tresolve,\n\t\t\t\t\ttargetOrigin,\n\t\t\t\t});\n\n\t\t\t\ttargetWindow.postMessage(\n\t\t\t\t\tJSON.stringify(request),\n\t\t\t\t\ttargetOrigin\n\t\t\t\t);\n\t\t\t});\n\n\t\t}\n\t\ttargetWindow.postMessage(\n\t\t\tJSON.stringify(request),\n\t\t\ttargetOrigin\n\t\t);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close client connection\n\t */\n\n\tclose() {\n\t\twindow.removeEventListener('message', this._listener);\n\t\tthis._listener = null;\n\t\tdelete this._requests;\n\t}\n\n\t/**\n\t * @access private\n\t */\n\n\tgetNextId() {\n\t\tthis._nextId += 1;\n\t\treturn this._nextId;\n\t}\n}\n\nmodule.exports = Messenger;\n","module.exports = require(\"./lib/main\");\n","const { openPopup } = require(\"./popup/popup\");\nconst { sleep, prepareTxn } = require(\"./utils/utils\");\nconst { Errors, SignTxnsError } = require(\"./utils/errors\");\n\nconst Messaging = require(\"./messaging/Messaging\");\n\n/**\n * @type {Messaging | null}\n */\nlet bridge = null;\n\n/**\n * @description Transaction hash\n * @typedef TxHash\n * @type {string}\n */\n\n/**\n * @description Base64 string\n * @typedef Base64\n * @type {string}\n */\n\n/**\n  * @description Options\n  * @typedef Options\n  * @type {object}\n  * @property {string} [bridgeUrl] Override wallet.myalgo.com default frame url.\n  * @property {number} [timeout] Number of msec to wait the popup response, default value: 1600000 msec.\n  * @property {boolean} [disableLedgerNano] It will disable ledger nano accounts and returns only mnemonic accounts.\n  */\n\n/**\n  * @description Sign transaction options\n  * @typedef SignTransactionOptions\n  * @type {object}\n  * @property {Address} [overrideSigner] Force transactions to be signed with the specified account instead of the from/auth address.\n  */\n\n/**\n * @description Connect method settings\n * @typedef ConnectionSettings\n * @type {object}\n * @property {boolean} [shouldSelectOneAccount] Only returns one account\n * @property {boolean} [openManager] Open account manager\n */\n\n/**\n * @description Algorand account address\n * @typedef Address\n * @type {string}\n */\n\n/**\n * @description Payment transaction object\n * @typedef PaymentTxn\n * @type {object}\n * @property {\"pay\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n */\n\n/**\n * @description Asset transfer transaction object\n * @typedef AssetTransferTxn\n * @type {object}\n * @property {\"axfer\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {Address} [to] Receiver Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} [amount] Amount to transfer (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {Address} [closeRemainderTo] Close remainder to address\n * @property {number} [assetIndex] Asset index\n * @property {Address} [assetRevocationTarget] Asset revocation address\n */\n\n/**\n * @description Asset configuration transaction object\n * @typedef AssetConfigTxn\n * @type {object}\n * @property {\"acfg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [assetIndex] Asset index\n * @property {number} [assetTotal] Asset total supply\n * @property {number} [assetDecimals] Asset decimals\n * @property {boolean} [assetDefaultFrozen] Default frozen\n * @property {Address} [assetManager] Asset manager address\n * @property {Address} [assetReserve] Asset reserve address\n * @property {Address} [assetFreeze] Asset freeze address\n * @property {Address} [assetClawback] Asset clawback address\n * @property {string} [assetUnitName] Asset unit name\n * @property {string} [assetName] Asset name\n * @property {string} [assetURL] Asset url\n * @property {string} [assetMetadataHash] Asset metadata hash\n * @property {boolean} [strictEmptyAddressChecking]\n */\n\n/**\n * @description Key registration transaction object\n * @typedef KeyRegTxn\n * @type {object}\n * @property {\"keyreg\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {string} [voteKey] Vote key\n * @property {string} [selectionKey] Selection key\n * @property {number} voteFirst Vote first round\n * @property {number} voteLast Vote last round\n * @property {number} [voteKeyDilution] Vote key dilution\n */\n\n/**\n * @description Application call transaction object\n * @typedef ApplicationTxn\n * @type {object}\n * @property {\"appl\"} type Transaction type\n * @property {Address} from Sender Address\n * @property {number} fee Transaction fee (in mAlgos)\n * @property {number} firstRound First block round\n * @property {number} lastRound Last block round\n * @property {Uint8Array|Base64} [note] Transaction note\n * @property {string} genesisID Algorand network genesis ID\n * @property {string} genesisHash Algorand network genesis hash\n * @property {Address} [reKeyTo] Change signer address\n * @property {boolean} [flatFee] flatFee (default: false)\n * @property {Address} [signer] Signer address\n * @property {Buffer|Base64} [group] Group id\n * @property {number} [appIndex] Application id\n * @property {0|1|2|3|4|5} [appOnComplete]\n * @property {number} [appLocalInts]\n * @property {number} [appLocalByteSlices]\n * @property {number} [appGlobalInts]\n * @property {number} [appGlobalByteSlices]\n * @property {Uint8Array|Base64} [appApprovalProgram]\n * @property {Uint8Array|Base64} [appClearProgram]\n * @property {Uint8Array[]|Base64[]} [appArgs]\n * @property {Address[]} [appAccounts]\n * @property {number[]} [appForeignApps]\n * @property {number[]} [appForeignAssets]\n */\n\n/**\n * @description Transaction Object\n * @typedef Transaction\n * @type {PaymentTxn | AssetTransferTxn | AssetConfigTxn | KeyRegTxn | ApplicationTxn}\n */\n\n/**\n * @description Base64 encoding of the canonical msgpack encoding of a SignedTxn\n * @typedef SignedTxnStr\n * @type {Base64}\n */\n\n/**\n * @description Application call transaction object\n * @typedef MultisigMetadata\n * @type {object}\n * @property {number} version Multisig version\n * @property {number} threshold Multisig threshold value\n * @property {Address[]} addrs Multisig cosigners\n */\n\n/**\n * @description ARC-0001 Transaction Object\n * @typedef WalletTransactions\n * @type {object}\n * @property {txs}\n * @property {Base64} txn Base64 encoding of the canonical msgpack encoding of a Transaction.\n * @property {Address} [authAddr] Authorized address used to sign the transaction when the account is rekeyed\n * @property {MultisigMetadata} [msig] Multisig metadata used to sign the transaction\n * @property {Address[]} [signers] Optional list of addresses that must sign the transactions\n * @property {SignedTxnStr} [stxn] Base64 encoding of the canonical msgpack encoding\n * of a SignedTxn corresponding to txn, when signers=[]\n * @property {string} [message] Optional message explaining the reason of the transaction\n * @property {string} [groupMessage] Message explaining the reason of this group of transaction.\n * Field only allowed in the first transaction of a group\n */\n\n/**\n * @description ARC-0001 Transaction Options Object\n * @typedef SignTxnsOpts\n * @type {object}\n */\n\n/**\n * @typedef EncodedTransaction\n * @type {Uint8Array|Base64} Algorand Encoded Transaction\n */\n\n/**\n * @typedef SignedTx\n * @type {object}\n * @property {TxHash} txID Transaction hash\n * @property {Uint8Array} blob Signed transaction\n */\n\nclass MyAlgoConnect {\n\n\t/**\n\t * @constructor\n\t * @param {Options} [options] Operation options\n\t */\n\tconstructor(options) {\n\n\t\tif (!bridge) {\n\t\t\tbridge = new Messaging();\n\t\t}\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messaging}\n\t\t */\n\t\tthis.bridge = bridge;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {number} Popup Timeout\n\t\t */\n\t\tthis.timeout = (options && options.timeout ? options.timeout : 1600000);\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {string} Frame url\n\t\t */\n\t\tthis.url = (options && options.bridgeUrl ? options.bridgeUrl : \"https://wallet.myalgo.com/bridge\");\n\n\t\tif (this.url.endsWith(\"/\"))\n\t\t\tthis.url = this.url.slice(0, -1);\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current connect opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentConnectPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signtx opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSigntxPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signlogic opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current tealsign opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\tthis.currentTealSignPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description This is used to reuse the current signbytes opened popup\n\t\t * @type {Window|null}\n\t\t */\n\t\t this.currentSignBytesPopup = null;\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Replace default bridge options\n\t\t * @type {import(\"@randlabs/communication-bridge\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: this.timeout };\n\n\t\t/**\n\t\t * @access private\n\t\t * @description Disable ledger nano\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.disableLedgerNano = (options && options.disableLedgerNano) ? options.disableLedgerNano : false;\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to load accounts from storage.\n\t * @param {ConnectionSettings} settings Connect settings\n\t * @returns {Promise<string[]>} Returns allowed accounts by the user.\n\t */\n\tasync connect(settings = { shouldSelectOneAccount: false, openManager: false }) {\n\n\t\tif (this.currentConnectPopup) {\n\t\t\tif (this.currentConnectPopup.closed) {\n\t\t\t\tthis.currentConnectPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentConnectPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentConnectPopup = openPopup(this.url + \"/connect.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentConnectPopup);\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentConnectPopup,\n\t\t\t\t{ method: \"unlock\", params: Object.assign(settings, { disableLedgerNano: this.disableLedgerNano }) },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn res.data.accounts;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentConnectPopup);\n\t\t\tthis.currentConnectPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {Transaction|Transaction[]|EncodedTransaction|EncodedTransaction[]} transaction Transaction object or a Transaction array.\n\t * @param {SignTransactionOptions} [signOptions] Sign transactions options object.\n\t * (The signer account must be the same for all transactions).\n\t * @returns {(SignedTx|SignedTx[])} Returns transaction blob or an Array of blobs, depends if the\n\t * transaction was an object or an array.\n\t */\n\tasync signTransaction(transaction, signOptions) {\n\t\tlet txn;\n\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(transaction))\n\t\t\ttxn = Array.from(transaction).map(tx => prepareTxn(tx));\n\t\telse\n\t\t\ttxn = prepareTxn(transaction);\n\n\t\ttry {\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"transaction\",\n\t\t\t\t\tparams: { txn, settings: { disableLedgerNano: this.disableLedgerNano }, options: signOptions },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\tif (Array.isArray(res.data)) {\n\t\t\t\tconst result = [];\n\t\t\t\tfor (const t of res.data) {\n\t\t\t\t\tt.blob = new Uint8Array(Buffer.from(t.blob, \"hex\"));\n\t\t\t\t\tresult.push(t);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tres.data.blob = new Uint8Array(Buffer.from(res.data.blob, \"hex\"));\n\n\t\t\treturn res.data;\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign transaction.\n\t * @param {WalletTransaction[]} txnsToSign Transactions to sign.\n\t * @param {SignTxnsOpts} [opts] Sign transactions options object.\n\t * @returns {(SignedTxnStr|null)[]} Returns an array of base64 encoding of the SignedTxn,\n\t * or null where the transaction was not to be signed.\n\t */\n\tasync signTxns(txnsToSign, opts) {\n\t\tif (this.currentSigntxPopup) {\n\t\t\tif (this.currentSigntxPopup.closed) {\n\t\t\t\tthis.currentSigntxPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSigntxPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tlet txns = txnsToSign;\n\t\t\tif (!Array.isArray(txnsToSign)) {\n\t\t\t\ttxns = [ txnsToSign ];\n\t\t\t}\n\n\t\t\tthis.currentSigntxPopup = openPopup(this.url + \"/signtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSigntxPopup);\n\n\t\t\t// Send transaction info\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSigntxPopup, {\n\t\t\t\t\tmethod: \"signTxns\",\n\t\t\t\t\tparams: { txns, settings: { disableLedgerNano: this.disableLedgerNano }, opts },\n\t\t\t\t},\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new SignTxnsError(res.message, res.code, res.data);\n\n\t\t\treturn res.data.map(r => (r ? Buffer.from(r.blob, 'hex').toString('base64') : null));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSigntxPopup);\n\t\t\tthis.currentSigntxPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign a teal program.\n\t * @param {Uint8Array|Base64} logic LogicSig program\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns logicsig blob\n\t */\n\tasync signLogicSig(logic, address) {\n\n\t\tif (this.currentSignLogicSigPopup) {\n\t\t\tif (this.currentSignLogicSigPopup.closed) {\n\t\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignLogicSigPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignLogicSigPopup = openPopup(this.url + \"/logicsigtx.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignLogicSigPopup);\n\n\t\t\t// Send program\n\t\t\tlet logicInBase64 = logic;\n\t\t\tif (logic.constructor === Uint8Array)\n\t\t\t\tlogicInBase64 = Buffer.from(logic).toString(\"base64\");\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignLogicSigPopup,\n\t\t\t\t{ method: \"logicsig\", params: { logic: logicInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signedTeal, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignLogicSigPopup);\n\t\t\tthis.currentSignLogicSigPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign data to verify in a teal program.\n\t * @param {Uint8Array|Base64} data Data to sign\n\t * @param {Address} contractAddress Address of the contract that will verify the data\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns data signature\n\t */\n\tasync tealSign(data, contractAddress, address) {\n\n\t\tif (this.currentTealSignPopup) {\n\t\t\tif (this.currentTealSignPopup.closed) {\n\t\t\t\tthis.currentTealSignPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentTealSignPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentTealSignPopup = openPopup(this.url + \"/tealsign.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentTealSignPopup);\n\n\t\t\t// Send program\n\t\t\tlet dataInBase64 = data;\n\t\t\tif (data.constructor === Uint8Array)\n\t\t\t\tdataInBase64 = Buffer.from(data).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentTealSignPopup,\n\t\t\t\t{ method: \"tealsign\", params: { data: dataInBase64, contractAddress: contractAddress, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentTealSignPopup);\n\t\t\tthis.currentTealSignPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access public\n\t * @description Open a new window to sign an arbitrary array of bytes.\n\t * @param {Uint8Array} bytes Bytes to sign\n\t * @param {Address} address Signer Address\n\t * @returns {Uint8Array} Returns bytes signature\n\t */\n\t async signBytes(bytes, address) {\n\t\tif (this.currentSignBytesPopup) {\n\t\t\tif (this.currentSignBytesPopup.closed) {\n\t\t\t\tthis.currentSignBytesPopup = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.focusWindow(this.currentSignBytesPopup);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tthis.currentSignBytesPopup = openPopup(this.url + \"/signbytes.html\");\n\t\t\tawait this.waitForWindowToLoad(this.currentSignBytesPopup);\n\n\t\t\tlet messageInBase64 = Buffer.from(bytes).toString(\"base64\");\n\n\t\t\tconst res = await this.bridge.sendMessage(\n\t\t\t\tthis.currentSignBytesPopup,\n\t\t\t\t{ method: \"signbytes\", params: { data: messageInBase64, address } },\n\t\t\t\tthis.url, this.options\n\t\t\t);\n\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\n\t\t\tif (res.status === \"error\")\n\t\t\t\tthrow new Error(res.message);\n\n\t\t\treturn new Uint8Array(Buffer.from(res.data.signature, \"base64\"));\n\t\t}\n\t\tcatch (err) {\n\t\t\tthis.closeWindow(this.currentSignBytesPopup);\n\t\t\tthis.currentSignBytesPopup = null;\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @async\n\t * @access private\n\t * @description Wait until the window opened loads.\n\t * @param {Window} targetWindow Window opened context.\n\t * @param {number} retries Times to retry before throw an error.\n\t * @returns {Promise<void>} Throw error if the window does not load.\n\t */\n\tasync waitForWindowToLoad(targetWindow, retries = 30) {\n\t\tfor (let i = 0; i < retries; i++) {\n\t\t\tawait sleep(300);\n\t\t\tif (!targetWindow) break;\n\t\t\ttry {\n\t\t\t\tconst res = await bridge.sendMessage(targetWindow, { method: \"status\" }, this.url);\n\t\t\t\tif (res.status == \"success\")\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\t// Ignore error\n\t\t\t}\n\t\t}\n\t\tthrow new Error(Errors.WINDOW_NOT_LOADED);\n\t}\n\n\t/**\n\t * @access private\n\t * @description Safely close an opened window\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t */\n\tcloseWindow(window) {\n\t\tif (window && !window.closed && window.close) {\n\t\t\twindow.close();\n\t\t}\n\t}\n\n\t/**\n\t * @access private\n\t * @description Focus current popup\n\t * @param {Window} window Window object\n\t * @returns {void}\n\t * @throws {\"Windows is opened\"}\n\t */\n\tfocusWindow(window) {\n\t\tif (window && window.focus) {\n\t\t\twindow.focus();\n\t\t\tthrow new Error(Errors.WINDOW_IS_OPENED);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error(Errors.INVALID_WINDOW);\n\t\t}\n\t}\n}\n\nmodule.exports = MyAlgoConnect;\n","const Messenger = require(\"@randlabs/communication-bridge\");\n\nconst WALLET_BRIDGE_CHANNEL_NAME = \"wallet-bridge-communication-channel\";\n\nclass Messaging {\n\n\t/**\n\t * @description Request object\n\t * @typedef {Object} Request\n\t * @property {string} method Request method\n\t * @property {Object} [params] Optionally, request params\n\t */\n\n\t/**\n\t * @description Response object\n\t * @typedef {Object} Response\n\t * @property {\"error\"|\"success\"} status Response status\n\t * @property {string} message Response message\n\t * @property {Object} [data] Optionally, is the request was a success and sent data\n\t */\n\n\n\t/**\n\t * @description Callback function to manage message received from the channel\n     * @callback onMessagingCallback\n     * @param {Request} request Request received from another window\n     * @param {sendResponse} cb Response callback\n\t * @returns {void}\n     */\n\n\t/**\n     * @constructor Messaging constructor\n     * @param {onMessagingCallback} [listenerCallback]\n     * @description Create an abstraction of Messenger class\n     */\n\n\tconstructor(listenerCallback) {\n\t\tconst that = this;\n\n\t\t/**\n\t\t * @access public\n\t\t * @description Send message options\n\t\t * @type {import(\"bridge-communication\").sendMessageOptions}\n\t\t */\n\t\tthis.options = { waitForReply: true, timeout: 250 };\n\n\t\t/**\n\t\t * @access private\n\t\t */\n\t\tthis.listenerCallback = listenerCallback;\n\n\t\t/**\n\t\t * @access private\n\t\t * @type {Messenger}\n\t\t */\n\t\tthis.bridge = new Messenger(WALLET_BRIDGE_CHANNEL_NAME, function(req, source, cb, bridge) {\n\t\t\tif (that.listenerCallback)\n\t\t\t\tthat.listenerCallback(req, cb);\n\t\t});\n\t}\n\n\t/**\n\t * @access public\n     * @description Send message to a target window\n     * @param {Window} window Target window\n     * @param {Request} request Request\n     * @param {string} origin Target origin\n\t * @param {import(\"bridge-communication\").sendMessageOptions} [options] Override default message options\n\t * @returns {Promise<Response>} Response of the target window\n     */\n\n\tsendMessage(window, request, origin, options) {\n\t\treturn this.bridge.sendMessage(window, request, origin, options ? options : this.options);\n\t}\n\n\t/**\n\t * @access public\n\t * @description Set new listener\n\t * @param {onMessagingCallback} [listenerCallback] Set a new listener or override actual listener\n\t * @returns {void}\n\t */\n\tsetNewListener(listenerCallback) {\n\t\tthis.listenerCallback = listenerCallback;\n\t}\n\n\t/**\n\t * @access public\n\t * @description Close bridge\n\t * @returns {void}\n\t */\n\tclose() {\n\t\tthis.bridge.close();\n\t}\n}\n\nmodule.exports = Messaging;\n","const { WINDOW_NOT_OPENED } = require(\"../utils/errors\");\n\n/**\n * @description Popup configuration\n * @typedef {Object} PopupOptions\n * @property {string} [name]\n * @property {number} [width]\n * @property {number} [height]\n * @property {number} [top]\n * @property {number} [left]\n * @property {0|1} [status]\n * @property {0|1} [resizable]\n * @property {0|1} [toolbar]\n * @property {0|1} [menubar]\n * @property {0|1} [scrollbars]\n */\n\n/**\n * @type {PopupOptions}\n */\nconst defaultOptions = {\n\twidth: 400,\n\theight: 600,\n};\n\n/**\n * @description Open a new browser window\n * @param {string} url\n * @param {PopupOptions} options\n * @returns {Window}\n * @file Open new popup\n * @author The kraken.js team\n * @copyright This file is part of the project BelterJS which is released under Apache-2.0 License.\n * Go to https://github.com/krakenjs/belter for full license details.\n */\n\nfunction openPopup(url, options = defaultOptions) {\n\n\tlet { name = '', width, height, top = 0, left = 0 } = options;\n\n\tif (width) {\n\t\tif (window.outerWidth) {\n\t\t\tleft = Math.round((window.outerWidth - width) / 2) + window.screenX;\n\t\t}\n\t\telse if (window.screen.width) {\n\t\t\tleft = Math.round((window.screen.width - width) / 2);\n\t\t}\n\t}\n\n\tif (height) {\n\t\tif (window.outerHeight) {\n\t\t\ttop = Math.round((window.outerHeight - height) / 2) + window.screenY;\n\t\t}\n\t\telse if (window.screen.height) {\n\t\t\ttop = Math.round((window.screen.height - height) / 2);\n\t\t}\n\t}\n\n\tif (width && height) {\n\t\toptions = {\n\t\t\ttop,\n\t\t\tleft,\n\t\t\twidth,\n\t\t\theight,\n\t\t\tstatus: 1,\n\t\t\ttoolbar: 0,\n\t\t\tmenubar: 0,\n\t\t\tresizable: 1,\n\t\t\tscrollbars: 1,\n\t\t};\n\t}\n\n\t// eslint-disable-next-line array-callback-return\n\tconst params = Object.keys(options).map((key) => {\n\t\tconst param = options[key];\n\t\tif (param !== null && param !== undefined && typeof param.toString === 'function') {\n\t\t\treturn `${key}=${param.toString()}`;\n\t\t}\n\t}).filter(Boolean).join(',');\n\n\tlet win;\n\n\ttry {\n\t\twin = window.open(url, name, params);\n\t}\n\tcatch (err) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - ${err.stack || err.message}`);\n\t}\n\n\tif (!win || window.closed) {\n\t\tthrow new Error(`${WINDOW_NOT_OPENED} - blocked`);\n\t}\n\n\treturn win;\n}\n\nmodule.exports = {\n\topenPopup,\n};\n","const ERRORS = {\n\tWINDOW_NOT_LOADED: \"Window not loaded\",\n\tWINDOW_IS_OPENED: \"Windows is opened\",\n\tWINDOW_NOT_OPENED: \"Can not open popup window\",\n\tINVALID_WINDOW: \"Invalid window\",\n};\n\nclass SignTxnsError extends Error {\n\tconstructor(message, code, data) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.data = data;\n\t}\n}\n\nmodule.exports = {\n\tERRORS,\n\tSignTxnsError\n};\n","\nfunction sleep(msec = 200) {\n\treturn new Promise(resolve => setTimeout(resolve, msec));\n}\n\n/**\n * @typedef {import(\"../main\").Transaction} Transaction\n */\n\n/**\n * @typedef {import(\"../main\").EncodedTransaction} EncodedTransaction\n */\n\n/**\n * @description Preparate transactions before send it to the bridge.\n * This method changes all ArrayBuffer to base64.\n * @param {Transaction|EncodedTransaction} transaction Transaction provided by the user\n * @returns {any} Return the same input\n */\nfunction prepareTxn(transaction) {\n\n\tif (transaction.constructor === Uint8Array)\n\t\treturn Buffer.from(transaction).toString(\"base64\");\n\telse if (typeof transaction === \"string\")\n\t\treturn transaction;\n\n\tconst txn = Object.assign({}, transaction);\n\n\tif (txn.note && txn.note.constructor === Uint8Array)\n\t\ttxn.note = Buffer.from(txn.note).toString(\"base64\");\n\n\tif (txn.assetMetadataHash && txn.assetMetadataHash.constructor === Uint8Array)\n\t\ttxn.assetMetadataHash = Buffer.from(txn.assetMetadataHash).toString(\"base64\");\n\n\tif (txn.group && txn.group.constructor === Uint8Array)\n\t\ttxn.group = Buffer.from(txn.group).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appApprovalProgram && txn.appApprovalProgram.constructor === Uint8Array)\n\t\ttxn.appApprovalProgram = Buffer.from(txn.appApprovalProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appClearProgram && txn.appClearProgram.constructor === Uint8Array)\n\t\ttxn.appClearProgram = Buffer.from(txn.appClearProgram).toString(\"base64\");\n\n\tif (txn.type === \"appl\" && txn.appArgs && txn.appArgs.length > 0)\n\t\tfor (let i = 0; i < txn.appArgs.length; i++)\n\t\t\tif (txn.appArgs[i].constructor === Uint8Array)\n\t\t\t\ttxn.appArgs[i] = Buffer.from(txn.appArgs[i]).toString(\"base64\");\n\n\treturn txn;\n}\n\nmodule.exports = {\n\tsleep,\n\tprepareTxn,\n};\n"],"names":["module","exports","Messenger","channelName","onMessageCallback","_classCallCheck","this","onMessage","_installListener","_requests","Map","_nextId","_defaultTimeout","_createClass","key","value","that","_listener","event","data","json","JSON","parse","channel","message","err","replyId","req","get","origin","targetOrigin","clearTimeout","timeout","delete","resolve","id","source","request","postMessage","stringify","window","addEventListener","targetWindow","options","URL","e","Error","getNextId","waitForReply","Promise","reject","setTimeout","set","removeEventListener","openPopup","require","_require2","sleep","prepareTxn","_require3","Errors","SignTxnsError","Messaging","bridge","MyAlgoConnect","url","bridgeUrl","endsWith","slice","currentConnectPopup","currentSigntxPopup","currentSignLogicSigPopup","currentTealSignPopup","currentSignBytesPopup","disableLedgerNano","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","settings","res","_args","arguments","wrap","_context","prev","next","length","undefined","shouldSelectOneAccount","openManager","closed","focusWindow","waitForWindowToLoad","sendMessage","method","params","Object","assign","sent","closeWindow","status","abrupt","accounts","t0","stop","apply","_signTransaction","_callee2","transaction","signOptions","txn","result","_iterator","_step","t","_context2","Array","isArray","from","map","tx","_createForOfIteratorHelper","s","n","done","blob","Uint8Array","Buffer","push","f","_x","_x2","_signTxns","_callee3","txnsToSign","opts","txns","_context3","code","r","toString","_x3","_x4","_signLogicSig","_callee4","logic","address","logicInBase64","_context4","constructor","signedTeal","_x5","_x6","_tealSign","_callee5","contractAddress","dataInBase64","_context5","signature","_x7","_x8","_x9","_signBytes","_callee6","bytes","messageInBase64","_context6","_x10","_x11","_waitForWindowToLoad","_callee7","retries","i","_args7","_context7","WINDOW_NOT_LOADED","_x12","close","focus","WINDOW_IS_OPENED","INVALID_WINDOW","listenerCallback","cb","WINDOW_NOT_OPENED","defaultOptions","width","height","_options","_options$name","name","_options$top","top","_options$left","left","outerWidth","Math","round","screenX","screen","outerHeight","screenY","toolbar","menubar","resizable","scrollbars","win","keys","param","concat","filter","Boolean","join","open","stack","_Error","_inherits","_super","_createSuper","_this","call","_wrapNativeSuper","ERRORS","msec","note","assetMetadataHash","group","type","appApprovalProgram","appClearProgram","appArgs"],"sourceRoot":""}